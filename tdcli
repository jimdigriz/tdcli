#!/usr/bin/env perl

use strict;
use warnings;

use v5.14;

use File::stat;
use Fcntl qw(:mode);
use Config::Tiny;
use WWW::Mechanize;
use HTTP::Status qw(is_client_error is_server_error);
use URI;
use JSON;
use Getopt::Std;
use Time::Piece;
use Date::Calc qw(Today Delta_Days Add_Delta_YMD);
use Text::CSV;
use HTML::Parser;

use Data::Dumper;

$Getopt::Std::STANDARD_HELP_VERSION = 1;

our $VERSION = '0.1';

use constant URL_BASE	=> 'https://secure.tddirectinvesting.co.uk/webbroker2';
use constant URL_LOGIN	=> '/login.jsp';
use constant URL_STEPUP	=> '/displayStepUpQuestion.sp';
use constant URL_INFO	=> '/customers/%USERACCT%/accountsInfo.sp';
use constant URL_PORT	=> '/customers/%USERACCT%/accounts/%ACCT%/portfolio-holdings.sp';
use constant URL_TRAN	=> '/customers/%USERACCT%/account/%ACCT%/transactions/GBP.sp';
use constant URL_ORDER	=> '/orders/%ORDER%/orderDetail/view.sp';
use constant URL_CHAL	=> '/authentication/challenge/%ACCT%.sp';

my %opts;
getopts('PTa:f:t:', \%opts);

$opts{f} = substr(localtime->ymd, 0, 8) . '01'
	unless (defined($opts{f}));
die 'from date must be of the format YYYY-MM-DD'
	unless ($opts{f} =~ /^[0-9]{4}-[01][0-9]-[0-3][0-9]$/);
$opts{f} = [ split(/-/, $opts{f}, 3) ];

$opts{t} = localtime->ymd
	unless (defined($opts{t}));
die 'to date must be of the format YYYY-MM-DD'
	unless ($opts{t} =~ /^[0-9]{4}-[01][0-9]-[0-3][0-9]$/);
$opts{t} = [ split(/-/, $opts{t}, 3) ];

die 'to date is in the future'
	unless (Delta_Days(@{$opts{t}}, Today()) >= 0);

die 'from date is later than to date'
	unless (Delta_Days(@{$opts{f}}, @{$opts{t}}) >= 0);

mkdir "$ENV{HOME}/.tdcli"
	unless (-d "$ENV{HOME}/.tdcli");
chmod 0700, "$ENV{HOME}/.tdcli";

die '~/.tdcli/config does not exist'
	unless (-f "$ENV{HOME}/.tdcli/config");

my $mode = stat("$ENV{HOME}/.tdcli/config")->mode;
if (($mode & S_IRGRP) && ($mode & S_IROTH)) {
	warn '~/.tdcli/config is not chmod 0600, fixing';
	chmod 0600, "$ENV{HOME}/.tdcli/config";
}

my $cfg = Config::Tiny->read("$ENV{HOME}/.tdcli/config")
	or die 'unable to open config: ' . Config::Tiny->errstr;

die 'missing user/pass attributes in ~/.tdcli/config'
	unless (defined($cfg->{_}->{user}) && defined($cfg->{_}->{pass}));

my $mech = WWW::Mechanize->new(autocheck => 0);

$mech->timeout(10);
$mech->env_proxy;
$mech->agent("tdcli/$VERSION (+https://github.com/jimdigriz/tdcli; " . $mech->_agent . ')');
$mech->default_header('Accept-Encoding' => scalar HTTP::Message::decodable());
$mech->from($cfg->{_}->{from})
	if (defined($cfg->{_}->{from}));

if (defined($cfg->{'_'}->{'debug'}) && $cfg->{'_'}->{'debug'} == 1) {
	warn 'debugging enabled, you will see the HTTPS requests in the clear!';
	&debug($mech);
}

$mech->cookie_jar({file => "$ENV{HOME}/.tdcli/cookies.txt", autosave => 1, ignore_discard => 1});
chmod 0600, "$ENV{HOME}/.tdcli/cookies.txt";

my ($csrftoken, %accts) = &login();

unless (defined($opts{P}) || defined($opts{T})) {
	print "Accounts (${\$cfg->{_}->{'acct'}}):\n";
	printf " * %s {%s}: %s\n", $_, $accts{$_}{type}, $accts{$_}{description}
		foreach (keys %accts);
	exit 0;
}

die 'need to supply valid account id'
	unless (defined($opts{a}) && defined($accts{$opts{a}}));

my $csv = Text::CSV->new;
$csv->eol("\r\n");

# HTML::Parser state
my @o;
my $depth;

my %fields;
my @data;
if ($opts{P}) {
	my $j = &fetchJSON(URL_BASE . URL_PORT, { USERACCT => $cfg->{_}->{'acct'}, ACCT => $opts{a} }, { CSRFTOKEN => $csrftoken });

	@data = @{$j->{portfolios}->{ALL}};
	%fields = map { $_, 1 } map { keys %$_ } @data;
} elsif ($opts{T}) {
	my @f = @{$opts{f}};
	my @t = Add_Delta_YMD(@f, 0, 18, 0);
	while (Delta_Days(@f, @{$opts{t}}) >= 0) {
		@t = @{$opts{t}}
			unless (Delta_Days(@t, @{$opts{t}}) >= 0);

		my $j = &fetchJSON(URL_BASE . URL_TRAN,
				{
					USERACCT => $cfg->{_}->{'acct'},
					ACCT => $opts{a},
				}, {
					CSRFTOKEN => $csrftoken,
					fromDate => join('/', reverse @f),
					toDate => join('/', reverse @t),
				});

		for (my $i = 0; $i < @{$j->{statementLines}}; $i++) {
			next unless (defined($j->{statementLines}[$i]{contractReference})
					&& $j->{statementLines}[$i]{contractReference} ne '');

			my $order = &fetchHTTP(URL_BASE . URL_ORDER,
				{
					USERACCT => $cfg->{_}->{'acct'},
					ACCT => $opts{a},
					ORDER => $j->{statementLines}[$i]{contractReference},
				}, {
					CSRFTOKEN => $csrftoken,
				});

			my $p = HTML::Parser->new(
				start_h	=> [ \&parse_cb, 'event,tagname,attr' ],
				end_h	=> [ \&parse_cb, 'event,tagname,attr' ],
				text_h	=> [ \&parse_cb, 'event,text' ],
			);

			@o = ();
			$depth = 0;
			$p->parse($order->decoded_content);

			my %table = @o;
			foreach (keys %table) {
				$table{$_} =~ s/,//g
					if ($table{$_} =~ s/^&(?:[a-z]+|#[0-9]+);(([0-9]+,)*[0-9]+\.[0-9]*)$/$1/);
				$j->{statementLines}[$i]{"ORDER $_"} = $table{$_};
			}
		}

		push @data, @{$j->{statementLines}};

		@f = Add_Delta_YMD(@f, 0, 18, 0);
		@t = Add_Delta_YMD(@f, 0, 18, 0);
	}

	%fields = map { $_, 1 } map { keys %$_ } @data;
}

$csv->print(\*STDOUT, [ sort keys %fields ]);
foreach my $d (@data) {
	$csv->print(\*STDOUT, [ map { $d->{$_} } sort keys %fields ]);
}

exit 0;

sub HELP_MESSAGE {
	print <<EOT;
Usage: $0 [ -h | -v | -a 1234 [ -P | -T [ -f YYYY-MM-DD ] [ -t YYYY-MM-DD ] ] ]
Export transactions from your TD Direct Investing account.

  -a ID                    select account number

  -P                       output CSV of portfolio

  -T                       output CSV of transactions
  -f YYYY-MM-DD            transactions from date (default: first of current month)
  -t YYYY-MM-DD            transactions until date (default: today)

  --help                   display this help and exit
  --version                output version information and exit
EOT
}

sub debug {
	my ($m) = @_;

       	$m->add_handler('request_send',  sub { my $r = $_[0]->clone; $r->decode; print STDERR "$_\n" foreach split /\n/, $r->dump });
       	$m->add_handler('response_done', sub { my $r = $_[0]->clone; $r->decode; print STDERR "$_\n" foreach split /\n/, $r->dump });
}

sub login {
	my ($csrftoken, %accts);
	if (-f "$ENV{HOME}/.tdcli/csrftoken" && open(my $T, '<', "$ENV{HOME}/.tdcli/csrftoken")) {
		local $/;
		$csrftoken = <$T>;
	}

	if (defined($cfg->{_}->{'acct'}) && defined($csrftoken)) {
		my $info = &fetchJSON(URL_BASE . URL_INFO, { USERACCT => $cfg->{_}->{'acct'} }, { CSRFTOKEN => $csrftoken });

		if (defined($info)) {
			$accts{$_->{accountId}} = $_
				foreach (@{$info->{accounts}});

			return ($csrftoken, %accts)
				if (defined($info));
		}
	}

	unlink "$ENV{HOME}/.tdcli/csrftoken";

	my $m = $mech->clone;

	&debug($m)
		if (defined($cfg->{'_'}->{'debug'}) && $cfg->{'_'}->{'debug'} == 1);

	# deal with unsupported browser
	$m->agent('Mozilla/5.0 (X11; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0 Iceweasel/36.0.4');

	my $r = $m->get(URL_BASE . URL_LOGIN);
	die 'unable to fetch login page: ' . $r->status_line
		if (is_server_error($r->code));

	die 'not allowed to fetch login page: ' . $r->status_line
		if (is_client_error($r->code));

	my $f = $m->form_name('logon');
	die "'login' form not found"
		unless (defined($f));

	$csrftoken = $f->find_input('CSRFTOKEN')->value;

	my $j = &fetchJSON(URL_BASE . URL_CHAL, { ACCT => $cfg->{_}->{'user'} }, { CSRFTOKEN => $csrftoken });
	die 'unable to fetch challenge: ' . $r->status_line
		if (is_server_error($r->code));

	$m->field('username', $cfg->{_}->{user});
	my $pass = '';
	for my $p ('first', 'second', 'third', 'fourth') {
		next unless (defined($j->{"${p}Challenge"}) && $j->{"${p}Challenge"} ne '0');

		my $l = substr $cfg->{_}->{pass}, $j->{"${p}Challenge"} - 1, 1;

		$m->field("${p}Challenge", $j->{"${p}Challenge"});
		$m->field("${p}Response", $l);
		$pass .= $l;
	}
	$m->field('password', $pass);
	$m->field('deviceFingerprint', '{"tz":0,"local":false,"session":false,"global":false,"user":false,"db":false}');

	$r = $m->click;
	die 'unable to login: ' . $r->status_line
		if (is_server_error($r->code));

	die 'login failed: ' . $r->status_line
		if (is_client_error($r->code));

	if ($m->uri eq URL_BASE . URL_STEPUP) {
		$r->decoded_content =~ /<form .*name="secQuestions".*What is your memorable ([\w]+)\?.*<\/form>/ms;

		$m->form_name('secQuestions');
		$m->field('answer', $cfg->{stepup}->{$1});

		$r = $m->click;
		die 'unable to stepup: ' . $r->status_line
			if (is_server_error($r->code));

		die 'stepup failed: ' . $r->status_line
			if (is_client_error($r->code));
	}

	my $link = $m->find_link(tag => 'frame', name => 'contentFrame');
	die 'unable to parse logged in page'
		unless (defined($link));

	my $uri = URI->new($link->URI->fragment);

	my $acctid = ($uri->path_segments)[2];
	die 'cannot find user account id'
		unless (defined($acctid));

	if ($acctid != $cfg->{_}->{'acct'}) {
		$cfg->{_}->{'acct'} = $acctid;
		$cfg->write("$ENV{HOME}/.tdcli/config");
		chmod 0600, "$ENV{HOME}/.tdcli/config";
	}

	open my $T, '>', "$ENV{HOME}/.tdcli/csrftoken";
	chmod 0600, "$ENV{HOME}/.tdcli/csrftoken";
	print $T $csrftoken;
	close $T;

	my $info = &fetchJSON(URL_BASE . URL_INFO, { USERACCT => $cfg->{_}->{'acct'} }, { CSRFTOKEN => $csrftoken });

	$accts{$_->{accountId}} = $_
		foreach (@{$info->{accounts}});

	return ($csrftoken, %accts)
}

sub fetchHTTP {
	my ($url, $macros, $qs) = @_;

	my $m = $mech->clone;

	&debug($m)
		if (defined($cfg->{'_'}->{'debug'}) && $cfg->{'_'}->{'debug'} == 1);

	$url =~ s/%$_%/${\$macros->{$_}}/g
		foreach keys %$macros;

	my $uri = URI->new($url);
	$uri->query_form(%$qs);

	my $r = $m->get($uri);
	die 'unable to fetch info page: ' . $r->status_line
		if (is_server_error($r->code));

	return if (is_client_error($r->code));

	return if ($m->uri =~ /\/error-pages\//);

	return $r;
}

sub fetchJSON {
	my ($url, $macros, $qs) = @_;

	my $http = &fetchHTTP(@_);

	return unless (defined($http));

	my $json = from_json $http->decoded_content;

	die 'unable to parse JSON'
		unless (defined($json));

	return $json;
}

sub parse_cb {
	if ($_[0] eq 'start') {
		return unless ($_[1] eq 'div');
		return unless (defined($_[2]->{class}));

		if ($depth == 0) {
			$depth = 1
				if ($_[2]->{class} eq 'middleWithTitle gradb2t');
		} elsif ($depth == 1) {
			$depth = 2
				if ($_[2]->{class} eq 'row');
		} elsif ($depth == 2) {
			$depth = 3
				if ($_[2]->{class} eq 'col-xs-6');
		}
	} elsif ($_[0] eq 'end') {
		return unless ($depth);
		return unless ($_[1] eq 'div');

		$depth--;
	} elsif ($_[0] eq 'text') {
		return unless ($depth == 3);

		my $text = $_[1];
		$text =~ s/^\s*(.*?)\s*$/$1/;

		return if ($text eq '');

		push @o, $text;
	}
}
